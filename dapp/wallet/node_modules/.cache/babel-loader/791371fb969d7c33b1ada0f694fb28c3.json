{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\innab\\\\PROJECT\\\\EthereumRoullette\\\\dapp\\\\wallet\\\\src\\\\Wallet.js\",\n    _s = $RefreshSig$();\n\nimport { useStoreApi } from \"./storeApi\";\nimport useWeb3 from \"./useWeb3\";\nimport { Button, TextField } from \"@material-ui/core\";\nimport \"./Wallet.css\";\nimport EthLogo from \"./ethereum.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Wallet() {\n  _s();\n\n  const {\n    balance,\n    address,\n    message,\n    setAddress,\n    setBalance\n  } = useStoreApi();\n  const web3 = useWeb3(); // get user account on button click\n\n  const getUserAccount = async () => {\n    if (window.ethereum) {\n      try {\n        await window.ethereum.enable();\n        web3.eth.getAccounts().then(accounts => {\n          setAddress(accounts[0]);\n          updateBalance(accounts[0]);\n        });\n      } catch (error) {\n        console.error(error);\n      }\n    } else {\n      alert(\"Metamask extensions not detected!\");\n    }\n  };\n\n  const updateBalance = async fromAddress => {\n    await web3.eth.getBalance(fromAddress).then(value => {\n      setBalance(web3.utils.fromWei(value, \"ether\"));\n    });\n  };\n\n  const sendTransaction = async e => {\n    e.preventDefault();\n    const amount = e.target[0].value;\n    const recipient = e.target[1].value;\n    await web3.eth.sendTransaction({\n      from: address,\n      to: recipient,\n      value: web3.utils.toWei(amount, \"ether\")\n    });\n    updateBalance(address);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Wallet\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"Wallet-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: EthLogo,\n        className: \"Wallet-logo\",\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"Send betting ammount \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), address ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" Your Account: \", address]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" Your Balance: \", balance, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : null, /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => getUserAccount(),\n        variant: \"outlined\",\n        color: \"primary\",\n        children: \"Connect your wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), message ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => sendTransaction(e),\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          required: true,\n          label: \"Amount\",\n          inputProps: {\n            step: \"any\"\n          },\n          type: \"number\",\n          variant: \"filled\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          required: true,\n          label: \"Recipient Address\",\n          variant: \"filled\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            margin: \"10px\"\n          },\n          type: \"submit\",\n          variant: \"outlined\",\n          color: \"default\",\n          children: \"Send Crypto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Wallet, \"PaPeGtD8HeZrPae4XqYX59YoxJ0=\", false, function () {\n  return [useStoreApi, useWeb3];\n});\n\n_c = Wallet;\nexport default Wallet;\n\nvar _c;\n\n$RefreshReg$(_c, \"Wallet\");","map":{"version":3,"sources":["C:/Users/innab/PROJECT/EthereumRoullette/dapp/wallet/src/Wallet.js"],"names":["useStoreApi","useWeb3","Button","TextField","EthLogo","Wallet","balance","address","message","setAddress","setBalance","web3","getUserAccount","window","ethereum","enable","eth","getAccounts","then","accounts","updateBalance","error","console","alert","fromAddress","getBalance","value","utils","fromWei","sendTransaction","e","preventDefault","amount","target","recipient","from","to","toWei","step","margin"],"mappings":";;;AAAA,SAASA,WAAT,QAA4B,YAA5B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,mBAAlC;AAEA,OAAO,cAAP;AACA,OAAOC,OAAP,MAAoB,gBAApB;;;;AAEA,SAASC,MAAT,GAAkB;AAAA;;AAChB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,OAAX;AAAoBC,IAAAA,OAApB;AAA6BC,IAAAA,UAA7B;AAAyCC,IAAAA;AAAzC,MAAwDV,WAAW,EAAzE;AACA,QAAMW,IAAI,GAAGV,OAAO,EAApB,CAFgB,CAIhB;;AACA,QAAMW,cAAc,GAAG,YAAY;AACjC,QAAIC,MAAM,CAACC,QAAX,EAAqB;AACnB,UAAI;AACF,cAAMD,MAAM,CAACC,QAAP,CAAgBC,MAAhB,EAAN;AACAJ,QAAAA,IAAI,CAACK,GAAL,CAASC,WAAT,GAAuBC,IAAvB,CAA4BC,QAAQ,IAAI;AACtCV,UAAAA,UAAU,CAACU,QAAQ,CAAC,CAAD,CAAT,CAAV;AACAC,UAAAA,aAAa,CAACD,QAAQ,CAAC,CAAD,CAAT,CAAb;AACD,SAHD;AAID,OAND,CAME,OAAOE,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AACF,KAVD,MAUO;AACLE,MAAAA,KAAK,CAAC,mCAAD,CAAL;AACD;AACF,GAdD;;AAgBA,QAAMH,aAAa,GAAG,MAAMI,WAAN,IAAqB;AACzC,UAAMb,IAAI,CAACK,GAAL,CAASS,UAAT,CAAoBD,WAApB,EAAiCN,IAAjC,CAAsCQ,KAAK,IAAI;AACnDhB,MAAAA,UAAU,CAACC,IAAI,CAACgB,KAAL,CAAWC,OAAX,CAAmBF,KAAnB,EAA0B,OAA1B,CAAD,CAAV;AACD,KAFK,CAAN;AAGD,GAJD;;AAMA,QAAMG,eAAe,GAAG,MAAMC,CAAN,IAAW;AACjCA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAMC,MAAM,GAAGF,CAAC,CAACG,MAAF,CAAS,CAAT,EAAYP,KAA3B;AACA,UAAMQ,SAAS,GAAGJ,CAAC,CAACG,MAAF,CAAS,CAAT,EAAYP,KAA9B;AACA,UAAMf,IAAI,CAACK,GAAL,CAASa,eAAT,CAAyB;AAC7BM,MAAAA,IAAI,EAAE5B,OADuB;AAE7B6B,MAAAA,EAAE,EAAEF,SAFyB;AAG7BR,MAAAA,KAAK,EAAEf,IAAI,CAACgB,KAAL,CAAWU,KAAX,CAAiBL,MAAjB,EAAyB,OAAzB;AAHsB,KAAzB,CAAN;AAKAZ,IAAAA,aAAa,CAACb,OAAD,CAAb;AACD,GAVD;;AAYA,sBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA,2BACE;AAAQ,MAAA,SAAS,EAAC,eAAlB;AAAA,8BACE;AAAK,QAAA,GAAG,EAAEH,OAAV;AAAmB,QAAA,SAAS,EAAC,aAA7B;AAA2C,QAAA,GAAG,EAAC;AAA/C;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,+BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFF,EAKGG,OAAO,gBACN;AAAA,gCACE;AAAA,wCAAmBA,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,wCAAmBD,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA,sBADM,GAKJ,IAVN,eAWE,QAAC,MAAD;AACE,QAAA,OAAO,EAAE,MAAMM,cAAc,EAD/B;AAEE,QAAA,OAAO,EAAC,UAFV;AAGE,QAAA,KAAK,EAAC,SAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAXF,EAkBGJ,OAAO,gBACN;AAAA,+BACE;AAAA,oBAAOA;AAAP;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADM,GAIJ,IAtBN,eAuBE;AAAM,QAAA,QAAQ,EAAEsB,CAAC,IAAID,eAAe,CAACC,CAAD,CAApC;AAAA,gCACE,QAAC,SAAD;AACE,UAAA,QAAQ,MADV;AAEE,UAAA,KAAK,EAAC,QAFR;AAGE,UAAA,UAAU,EAAE;AAAEQ,YAAAA,IAAI,EAAE;AAAR,WAHd;AAIE,UAAA,IAAI,EAAC,QAJP;AAKE,UAAA,OAAO,EAAC;AALV;AAAA;AAAA;AAAA;AAAA,gBADF,eAQE,QAAC,SAAD;AAAW,UAAA,QAAQ,MAAnB;AAAoB,UAAA,KAAK,EAAC,mBAA1B;AAA8C,UAAA,OAAO,EAAC;AAAtD;AAAA;AAAA;AAAA;AAAA,gBARF,eASE,QAAC,MAAD;AACE,UAAA,KAAK,EAAE;AAAEC,YAAAA,MAAM,EAAE;AAAV,WADT;AAEE,UAAA,IAAI,EAAC,QAFP;AAGE,UAAA,OAAO,EAAC,UAHV;AAIE,UAAA,KAAK,EAAC,SAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBATF;AAAA;AAAA;AAAA;AAAA;AAAA,cAvBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA8CD;;GArFQlC,M;UACuDL,W,EACjDC,O;;;KAFNI,M;AAuFT,eAAeA,MAAf","sourcesContent":["import { useStoreApi } from \"./storeApi\";\nimport useWeb3 from \"./useWeb3\";\nimport { Button, TextField } from \"@material-ui/core\";\n\nimport \"./Wallet.css\";\nimport EthLogo from \"./ethereum.png\";\n\nfunction Wallet() {\n  const { balance, address, message, setAddress, setBalance } = useStoreApi();\n  const web3 = useWeb3();\n\n  // get user account on button click\n  const getUserAccount = async () => {\n    if (window.ethereum) {\n      try {\n        await window.ethereum.enable();\n        web3.eth.getAccounts().then(accounts => {\n          setAddress(accounts[0]);\n          updateBalance(accounts[0]);\n        });\n      } catch (error) {\n        console.error(error);\n      }\n    } else {\n      alert(\"Metamask extensions not detected!\");\n    }\n  };\n\n  const updateBalance = async fromAddress => {\n    await web3.eth.getBalance(fromAddress).then(value => {\n      setBalance(web3.utils.fromWei(value, \"ether\"));\n    });\n  };\n\n  const sendTransaction = async e => {\n    e.preventDefault();\n    const amount = e.target[0].value;\n    const recipient = e.target[1].value;\n    await web3.eth.sendTransaction({\n      from: address,\n      to: recipient,\n      value: web3.utils.toWei(amount, \"ether\")\n    });\n    updateBalance(address);\n  };\n\n  return (\n    <div className=\"Wallet\">\n      <header className=\"Wallet-header\">\n        <img src={EthLogo} className=\"Wallet-logo\" alt=\"logo\" />\n        <p>\n          <code>Send betting ammount </code>\n        </p>\n        {address ? (\n          <>\n            <p> Your Account: {address}</p>\n            <p> Your Balance: {balance} </p>\n          </>\n        ) : null}\n        <Button\n          onClick={() => getUserAccount()}\n          variant=\"outlined\"\n          color=\"primary\"\n        >\n          Connect your wallet\n        </Button>\n        {message ? (\n          <p>\n            <code>{message}</code>\n          </p>\n        ) : null}\n        <form onSubmit={e => sendTransaction(e)}>\n          <TextField\n            required\n            label=\"Amount\"\n            inputProps={{ step: \"any\" }}\n            type=\"number\"\n            variant=\"filled\"\n          />\n          <TextField required label=\"Recipient Address\" variant=\"filled\" />\n          <Button\n            style={{ margin: \"10px\" }}\n            type=\"submit\"\n            variant=\"outlined\"\n            color=\"default\"\n          >\n            Send Crypto\n          </Button>\n        </form>\n      </header>\n    </div>\n  );\n}\n\nexport default Wallet;\n"]},"metadata":{},"sourceType":"module"}