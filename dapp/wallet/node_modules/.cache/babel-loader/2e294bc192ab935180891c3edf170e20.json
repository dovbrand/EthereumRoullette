{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\n\nconst useWeb3 = () => {\n  _s();\n\n  const [web3, setWeb3] = useState(null);\n  useEffect(() => {\n    var instance;\n\n    if (window.ethereum) {\n      // set up a new provider\n      try {\n        instance = new Web3(window.ethereum);\n      } catch (error) {\n        console.error(error);\n      }\n    } else if (window.web3) {\n      instance = new Web3(window.web3);\n    } else {\n      // fallback on localhost provider\n      const provider = new Web3.provider.HttpProvider(\"http://127.0.0.1:7545\");\n      instance = new Web3(provider);\n    }\n\n    setWeb3(instance);\n  }, []);\n  return web3;\n};\n\n_s(useWeb3, \"vywh7r7Xg/3qQYSNYr606C3GtTM=\");\n\nexport default useWeb3;","map":{"version":3,"sources":["C:/Users/innab/PROJECT/EthereumRoullette/dapp/wallet/src/useWeb3.js"],"names":["useEffect","useState","Web3","useWeb3","web3","setWeb3","instance","window","ethereum","error","console","provider","HttpProvider"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,IAAP,MAAiB,MAAjB;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,IAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,QAAJ;;AACA,QAAIC,MAAM,CAACC,QAAX,EAAqB;AACnB;AACA,UAAI;AACFF,QAAAA,QAAQ,GAAG,IAAIJ,IAAJ,CAASK,MAAM,CAACC,QAAhB,CAAX;AACD,OAFD,CAEE,OAAOC,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AACF,KAPD,MAOO,IAAIF,MAAM,CAACH,IAAX,EAAiB;AACtBE,MAAAA,QAAQ,GAAG,IAAIJ,IAAJ,CAASK,MAAM,CAACH,IAAhB,CAAX;AACD,KAFM,MAEA;AACL;AACA,YAAMO,QAAQ,GAAG,IAAIT,IAAI,CAACS,QAAL,CAAcC,YAAlB,CAA+B,uBAA/B,CAAjB;AACAN,MAAAA,QAAQ,GAAG,IAAIJ,IAAJ,CAASS,QAAT,CAAX;AACD;;AACDN,IAAAA,OAAO,CAACC,QAAD,CAAP;AACD,GAjBQ,EAiBN,EAjBM,CAAT;AAkBA,SAAOF,IAAP;AACD,CAtBD;;GAAMD,O;;AAwBN,eAAeA,OAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\n\nconst useWeb3 = () => {\n  const [web3, setWeb3] = useState(null);\n\n  useEffect(() => {\n    var instance;\n    if (window.ethereum) {\n      // set up a new provider\n      try {\n        instance = new Web3(window.ethereum);\n      } catch (error) {\n        console.error(error);\n      }\n    } else if (window.web3) {\n      instance = new Web3(window.web3);\n    } else {\n      // fallback on localhost provider\n      const provider = new Web3.provider.HttpProvider(\"http://127.0.0.1:7545\");\n      instance = new Web3(provider);\n    }\n    setWeb3(instance);\n  }, []);\n  return web3;\n};\n\nexport default useWeb3;\n"]},"metadata":{},"sourceType":"module"}