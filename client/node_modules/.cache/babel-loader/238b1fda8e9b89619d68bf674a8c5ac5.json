{"ast":null,"code":"\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, hexConcat, hexDataLength, hexDataSlice, hexlify, hexZeroPad, isBytesLike, splitSignature, stripZeros } from \"@ethersproject/bytes\";\nimport { Zero } from \"@ethersproject/constants\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { checkProperties } from \"@ethersproject/properties\";\nimport * as RLP from \"@ethersproject/rlp\";\nimport { computePublicKey, recoverPublicKey } from \"@ethersproject/signing-key\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version); ///////////////////////////////\n\nfunction handleAddress(value) {\n  if (value === \"0x\") {\n    return null;\n  }\n\n  return getAddress(value);\n}\n\nfunction handleNumber(value) {\n  if (value === \"0x\") {\n    return Zero;\n  }\n\n  return BigNumber.from(value);\n} // Legacy Transaction Fields\n\n\nconst transactionFields = [{\n  name: \"nonce\",\n  maxLength: 32,\n  numeric: true\n}, {\n  name: \"gasPrice\",\n  maxLength: 32,\n  numeric: true\n}, {\n  name: \"gasLimit\",\n  maxLength: 32,\n  numeric: true\n}, {\n  name: \"to\",\n  length: 20\n}, {\n  name: \"value\",\n  maxLength: 32,\n  numeric: true\n}, {\n  name: \"data\"\n}];\nconst allowedTransactionKeys = {\n  chainId: true,\n  data: true,\n  gasLimit: true,\n  gasPrice: true,\n  nonce: true,\n  to: true,\n  value: true\n};\nexport function computeAddress(key) {\n  const publicKey = computePublicKey(key);\n  return getAddress(hexDataSlice(keccak256(hexDataSlice(publicKey, 1)), 12));\n}\nexport function recoverAddress(digest, signature) {\n  return computeAddress(recoverPublicKey(arrayify(digest), signature));\n}\n\nfunction formatNumber(value, name) {\n  const result = stripZeros(BigNumber.from(value).toHexString());\n\n  if (result.length > 32) {\n    logger.throwArgumentError(\"invalid length for \" + name, \"transaction:\" + name, value);\n  }\n\n  return result;\n}\n\nfunction accessSetify(addr, storageKeys) {\n  return {\n    address: getAddress(addr),\n    storageKeys: (storageKeys || []).map((storageKey, index) => {\n      if (hexDataLength(storageKey) !== 32) {\n        logger.throwArgumentError(\"invalid access list storageKey\", `accessList[${addr}:${index}]`, storageKey);\n      }\n\n      return storageKey.toLowerCase();\n    })\n  };\n}\n\nexport function accessListify(value) {\n  if (Array.isArray(value)) {\n    return value.map((set, index) => {\n      if (Array.isArray(set)) {\n        if (set.length > 2) {\n          logger.throwArgumentError(\"access list expected to be [ address, storageKeys[] ]\", `value[${index}]`, set);\n        }\n\n        return accessSetify(set[0], set[1]);\n      }\n\n      return accessSetify(set.address, set.storageKeys);\n    });\n  }\n\n  const result = Object.keys(value).map(addr => {\n    const storageKeys = value[addr].reduce((accum, storageKey) => {\n      accum[storageKey] = true;\n      return accum;\n    }, {});\n    return accessSetify(addr, Object.keys(storageKeys).sort());\n  });\n  result.sort((a, b) => a.address.localeCompare(b.address));\n  return result;\n}\n\nfunction formatAccessList(value) {\n  return accessListify(value).map(set => [set.address, set.storageKeys]);\n}\n\nfunction _serializeEip2930(transaction, signature) {\n  const fields = [formatNumber(transaction.chainId || 0, \"chainId\"), formatNumber(transaction.nonce || 0, \"nonce\"), formatNumber(transaction.gasPrice || 0, \"gasPrice\"), formatNumber(transaction.gasLimit || 0, \"gasLimit\"), transaction.to != null ? getAddress(transaction.to) : \"0x\", formatNumber(transaction.value || 0, \"value\"), transaction.data || \"0x\", formatAccessList(transaction.accessList || [])];\n\n  if (signature) {\n    const sig = splitSignature(signature);\n    fields.push(formatNumber(sig.recoveryParam, \"recoveryParam\"));\n    fields.push(stripZeros(sig.r));\n    fields.push(stripZeros(sig.s));\n  }\n\n  return hexConcat([\"0x01\", RLP.encode(fields)]);\n} // Legacy Transactions and EIP-155\n\n\nfunction _serialize(transaction, signature) {\n  checkProperties(transaction, allowedTransactionKeys);\n  const raw = [];\n  transactionFields.forEach(function (fieldInfo) {\n    let value = transaction[fieldInfo.name] || [];\n    const options = {};\n\n    if (fieldInfo.numeric) {\n      options.hexPad = \"left\";\n    }\n\n    value = arrayify(hexlify(value, options)); // Fixed-width field\n\n    if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {\n      logger.throwArgumentError(\"invalid length for \" + fieldInfo.name, \"transaction:\" + fieldInfo.name, value);\n    } // Variable-width (with a maximum)\n\n\n    if (fieldInfo.maxLength) {\n      value = stripZeros(value);\n\n      if (value.length > fieldInfo.maxLength) {\n        logger.throwArgumentError(\"invalid length for \" + fieldInfo.name, \"transaction:\" + fieldInfo.name, value);\n      }\n    }\n\n    raw.push(hexlify(value));\n  });\n  let chainId = 0;\n\n  if (transaction.chainId != null) {\n    // A chainId was provided; if non-zero we'll use EIP-155\n    chainId = transaction.chainId;\n\n    if (typeof chainId !== \"number\") {\n      logger.throwArgumentError(\"invalid transaction.chainId\", \"transaction\", transaction);\n    }\n  } else if (signature && !isBytesLike(signature) && signature.v > 28) {\n    // No chainId provided, but the signature is signing with EIP-155; derive chainId\n    chainId = Math.floor((signature.v - 35) / 2);\n  } // We have an EIP-155 transaction (chainId was specified and non-zero)\n\n\n  if (chainId !== 0) {\n    raw.push(hexlify(chainId)); // @TODO: hexValue?\n\n    raw.push(\"0x\");\n    raw.push(\"0x\");\n  } // Requesting an unsigned transation\n\n\n  if (!signature) {\n    return RLP.encode(raw);\n  } // The splitSignature will ensure the transaction has a recoveryParam in the\n  // case that the signTransaction function only adds a v.\n\n\n  const sig = splitSignature(signature); // We pushed a chainId and null r, s on for hashing only; remove those\n\n  let v = 27 + sig.recoveryParam;\n\n  if (chainId !== 0) {\n    raw.pop();\n    raw.pop();\n    raw.pop();\n    v += chainId * 2 + 8; // If an EIP-155 v (directly or indirectly; maybe _vs) was provided, check it!\n\n    if (sig.v > 28 && sig.v !== v) {\n      logger.throwArgumentError(\"transaction.chainId/signature.v mismatch\", \"signature\", signature);\n    }\n  } else if (sig.v !== v) {\n    logger.throwArgumentError(\"transaction.chainId/signature.v mismatch\", \"signature\", signature);\n  }\n\n  raw.push(hexlify(v));\n  raw.push(stripZeros(arrayify(sig.r)));\n  raw.push(stripZeros(arrayify(sig.s)));\n  return RLP.encode(raw);\n}\n\nexport function serialize(transaction, signature) {\n  // Legacy and EIP-155 Transactions\n  if (transaction.type == null) {\n    if (transaction.accessList != null) {\n      logger.throwArgumentError(\"untyped transactions do not support accessList; include type: 1\", \"transaction\", transaction);\n    }\n\n    return _serialize(transaction, signature);\n  } // Typed Transactions (EIP-2718)\n\n\n  switch (transaction.type) {\n    case 1:\n      return _serializeEip2930(transaction, signature);\n\n    default:\n      break;\n  }\n\n  return logger.throwError(`unsupported transaction type: ${transaction.type}`, Logger.errors.UNSUPPORTED_OPERATION, {\n    operation: \"serializeTransaction\",\n    transactionType: transaction.type\n  });\n}\n\nfunction _parseEip2930(payload) {\n  const transaction = RLP.decode(payload.slice(1));\n\n  if (transaction.length !== 8 && transaction.length !== 11) {\n    logger.throwArgumentError(\"invalid component count for transaction type: 1\", \"payload\", hexlify(payload));\n  }\n\n  const tx = {\n    type: 1,\n    chainId: handleNumber(transaction[0]).toNumber(),\n    nonce: handleNumber(transaction[1]).toNumber(),\n    gasPrice: handleNumber(transaction[2]),\n    gasLimit: handleNumber(transaction[3]),\n    to: handleAddress(transaction[4]),\n    value: handleNumber(transaction[5]),\n    data: transaction[6],\n    accessList: accessListify(transaction[7])\n  }; // Unsigned EIP-2930 Transaction\n\n  if (transaction.length === 8) {\n    return tx;\n  }\n\n  try {\n    const recid = handleNumber(transaction[8]).toNumber();\n\n    if (recid !== 0 && recid !== 1) {\n      throw new Error(\"bad recid\");\n    }\n\n    tx.v = recid;\n  } catch (error) {\n    logger.throwArgumentError(\"invalid v for transaction type: 1\", \"v\", transaction[8]);\n  }\n\n  tx.r = hexZeroPad(transaction[9], 32);\n  tx.s = hexZeroPad(transaction[10], 32);\n\n  try {\n    const digest = keccak256(_serializeEip2930(tx));\n    tx.from = recoverAddress(digest, {\n      r: tx.r,\n      s: tx.s,\n      recoveryParam: tx.v\n    });\n  } catch (error) {\n    console.log(error);\n  }\n\n  tx.hash = keccak256(payload);\n  return tx;\n} // Legacy Transactions and EIP-155\n\n\nfunction _parse(rawTransaction) {\n  const transaction = RLP.decode(rawTransaction);\n\n  if (transaction.length !== 9 && transaction.length !== 6) {\n    logger.throwArgumentError(\"invalid raw transaction\", \"rawTransaction\", rawTransaction);\n  }\n\n  const tx = {\n    nonce: handleNumber(transaction[0]).toNumber(),\n    gasPrice: handleNumber(transaction[1]),\n    gasLimit: handleNumber(transaction[2]),\n    to: handleAddress(transaction[3]),\n    value: handleNumber(transaction[4]),\n    data: transaction[5],\n    chainId: 0\n  }; // Legacy unsigned transaction\n\n  if (transaction.length === 6) {\n    return tx;\n  }\n\n  try {\n    tx.v = BigNumber.from(transaction[6]).toNumber();\n  } catch (error) {\n    console.log(error);\n    return tx;\n  }\n\n  tx.r = hexZeroPad(transaction[7], 32);\n  tx.s = hexZeroPad(transaction[8], 32);\n\n  if (BigNumber.from(tx.r).isZero() && BigNumber.from(tx.s).isZero()) {\n    // EIP-155 unsigned transaction\n    tx.chainId = tx.v;\n    tx.v = 0;\n  } else {\n    // Signed Tranasaction\n    tx.chainId = Math.floor((tx.v - 35) / 2);\n\n    if (tx.chainId < 0) {\n      tx.chainId = 0;\n    }\n\n    let recoveryParam = tx.v - 27;\n    const raw = transaction.slice(0, 6);\n\n    if (tx.chainId !== 0) {\n      raw.push(hexlify(tx.chainId));\n      raw.push(\"0x\");\n      raw.push(\"0x\");\n      recoveryParam -= tx.chainId * 2 + 8;\n    }\n\n    const digest = keccak256(RLP.encode(raw));\n\n    try {\n      tx.from = recoverAddress(digest, {\n        r: hexlify(tx.r),\n        s: hexlify(tx.s),\n        recoveryParam: recoveryParam\n      });\n    } catch (error) {\n      console.log(error);\n    }\n\n    tx.hash = keccak256(rawTransaction);\n  }\n\n  tx.type = null;\n  return tx;\n}\n\nexport function parse(rawTransaction) {\n  const payload = arrayify(rawTransaction); // Legacy and EIP-155 Transactions\n\n  if (payload[0] > 0x7f) {\n    return _parse(payload);\n  } // Typed Transaction (EIP-2718)\n\n\n  switch (payload[0]) {\n    case 1:\n      return _parseEip2930(payload);\n\n    default:\n      break;\n  }\n\n  return logger.throwError(`unsupported transaction type: ${payload[0]}`, Logger.errors.UNSUPPORTED_OPERATION, {\n    operation: \"parseTransaction\",\n    transactionType: payload[0]\n  });\n}","map":{"version":3,"sources":["/Users/MMayaguari/Documents/GitHub/EthereumRoullette/client/node_modules/@ethersproject/transactions/lib.esm/index.js"],"names":["getAddress","BigNumber","arrayify","hexConcat","hexDataLength","hexDataSlice","hexlify","hexZeroPad","isBytesLike","splitSignature","stripZeros","Zero","keccak256","checkProperties","RLP","computePublicKey","recoverPublicKey","Logger","version","logger","handleAddress","value","handleNumber","from","transactionFields","name","maxLength","numeric","length","allowedTransactionKeys","chainId","data","gasLimit","gasPrice","nonce","to","computeAddress","key","publicKey","recoverAddress","digest","signature","formatNumber","result","toHexString","throwArgumentError","accessSetify","addr","storageKeys","address","map","storageKey","index","toLowerCase","accessListify","Array","isArray","set","Object","keys","reduce","accum","sort","a","b","localeCompare","formatAccessList","_serializeEip2930","transaction","fields","accessList","sig","push","recoveryParam","r","s","encode","_serialize","raw","forEach","fieldInfo","options","hexPad","v","Math","floor","pop","serialize","type","throwError","errors","UNSUPPORTED_OPERATION","operation","transactionType","_parseEip2930","payload","decode","slice","tx","toNumber","recid","Error","error","console","log","hash","_parse","rawTransaction","isZero","parse"],"mappings":"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","sourcesContent":["\"use strict\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, hexConcat, hexDataLength, hexDataSlice, hexlify, hexZeroPad, isBytesLike, splitSignature, stripZeros, } from \"@ethersproject/bytes\";\nimport { Zero } from \"@ethersproject/constants\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { checkProperties } from \"@ethersproject/properties\";\nimport * as RLP from \"@ethersproject/rlp\";\nimport { computePublicKey, recoverPublicKey } from \"@ethersproject/signing-key\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nfunction handleAddress(value) {\n    if (value === \"0x\") {\n        return null;\n    }\n    return getAddress(value);\n}\nfunction handleNumber(value) {\n    if (value === \"0x\") {\n        return Zero;\n    }\n    return BigNumber.from(value);\n}\n// Legacy Transaction Fields\nconst transactionFields = [\n    { name: \"nonce\", maxLength: 32, numeric: true },\n    { name: \"gasPrice\", maxLength: 32, numeric: true },\n    { name: \"gasLimit\", maxLength: 32, numeric: true },\n    { name: \"to\", length: 20 },\n    { name: \"value\", maxLength: 32, numeric: true },\n    { name: \"data\" },\n];\nconst allowedTransactionKeys = {\n    chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true\n};\nexport function computeAddress(key) {\n    const publicKey = computePublicKey(key);\n    return getAddress(hexDataSlice(keccak256(hexDataSlice(publicKey, 1)), 12));\n}\nexport function recoverAddress(digest, signature) {\n    return computeAddress(recoverPublicKey(arrayify(digest), signature));\n}\nfunction formatNumber(value, name) {\n    const result = stripZeros(BigNumber.from(value).toHexString());\n    if (result.length > 32) {\n        logger.throwArgumentError(\"invalid length for \" + name, (\"transaction:\" + name), value);\n    }\n    return result;\n}\nfunction accessSetify(addr, storageKeys) {\n    return {\n        address: getAddress(addr),\n        storageKeys: (storageKeys || []).map((storageKey, index) => {\n            if (hexDataLength(storageKey) !== 32) {\n                logger.throwArgumentError(\"invalid access list storageKey\", `accessList[${addr}:${index}]`, storageKey);\n            }\n            return storageKey.toLowerCase();\n        })\n    };\n}\nexport function accessListify(value) {\n    if (Array.isArray(value)) {\n        return value.map((set, index) => {\n            if (Array.isArray(set)) {\n                if (set.length > 2) {\n                    logger.throwArgumentError(\"access list expected to be [ address, storageKeys[] ]\", `value[${index}]`, set);\n                }\n                return accessSetify(set[0], set[1]);\n            }\n            return accessSetify(set.address, set.storageKeys);\n        });\n    }\n    const result = Object.keys(value).map((addr) => {\n        const storageKeys = value[addr].reduce((accum, storageKey) => {\n            accum[storageKey] = true;\n            return accum;\n        }, {});\n        return accessSetify(addr, Object.keys(storageKeys).sort());\n    });\n    result.sort((a, b) => (a.address.localeCompare(b.address)));\n    return result;\n}\nfunction formatAccessList(value) {\n    return accessListify(value).map((set) => [set.address, set.storageKeys]);\n}\nfunction _serializeEip2930(transaction, signature) {\n    const fields = [\n        formatNumber(transaction.chainId || 0, \"chainId\"),\n        formatNumber(transaction.nonce || 0, \"nonce\"),\n        formatNumber(transaction.gasPrice || 0, \"gasPrice\"),\n        formatNumber(transaction.gasLimit || 0, \"gasLimit\"),\n        ((transaction.to != null) ? getAddress(transaction.to) : \"0x\"),\n        formatNumber(transaction.value || 0, \"value\"),\n        (transaction.data || \"0x\"),\n        (formatAccessList(transaction.accessList || []))\n    ];\n    if (signature) {\n        const sig = splitSignature(signature);\n        fields.push(formatNumber(sig.recoveryParam, \"recoveryParam\"));\n        fields.push(stripZeros(sig.r));\n        fields.push(stripZeros(sig.s));\n    }\n    return hexConcat([\"0x01\", RLP.encode(fields)]);\n}\n// Legacy Transactions and EIP-155\nfunction _serialize(transaction, signature) {\n    checkProperties(transaction, allowedTransactionKeys);\n    const raw = [];\n    transactionFields.forEach(function (fieldInfo) {\n        let value = transaction[fieldInfo.name] || ([]);\n        const options = {};\n        if (fieldInfo.numeric) {\n            options.hexPad = \"left\";\n        }\n        value = arrayify(hexlify(value, options));\n        // Fixed-width field\n        if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {\n            logger.throwArgumentError(\"invalid length for \" + fieldInfo.name, (\"transaction:\" + fieldInfo.name), value);\n        }\n        // Variable-width (with a maximum)\n        if (fieldInfo.maxLength) {\n            value = stripZeros(value);\n            if (value.length > fieldInfo.maxLength) {\n                logger.throwArgumentError(\"invalid length for \" + fieldInfo.name, (\"transaction:\" + fieldInfo.name), value);\n            }\n        }\n        raw.push(hexlify(value));\n    });\n    let chainId = 0;\n    if (transaction.chainId != null) {\n        // A chainId was provided; if non-zero we'll use EIP-155\n        chainId = transaction.chainId;\n        if (typeof (chainId) !== \"number\") {\n            logger.throwArgumentError(\"invalid transaction.chainId\", \"transaction\", transaction);\n        }\n    }\n    else if (signature && !isBytesLike(signature) && signature.v > 28) {\n        // No chainId provided, but the signature is signing with EIP-155; derive chainId\n        chainId = Math.floor((signature.v - 35) / 2);\n    }\n    // We have an EIP-155 transaction (chainId was specified and non-zero)\n    if (chainId !== 0) {\n        raw.push(hexlify(chainId)); // @TODO: hexValue?\n        raw.push(\"0x\");\n        raw.push(\"0x\");\n    }\n    // Requesting an unsigned transation\n    if (!signature) {\n        return RLP.encode(raw);\n    }\n    // The splitSignature will ensure the transaction has a recoveryParam in the\n    // case that the signTransaction function only adds a v.\n    const sig = splitSignature(signature);\n    // We pushed a chainId and null r, s on for hashing only; remove those\n    let v = 27 + sig.recoveryParam;\n    if (chainId !== 0) {\n        raw.pop();\n        raw.pop();\n        raw.pop();\n        v += chainId * 2 + 8;\n        // If an EIP-155 v (directly or indirectly; maybe _vs) was provided, check it!\n        if (sig.v > 28 && sig.v !== v) {\n            logger.throwArgumentError(\"transaction.chainId/signature.v mismatch\", \"signature\", signature);\n        }\n    }\n    else if (sig.v !== v) {\n        logger.throwArgumentError(\"transaction.chainId/signature.v mismatch\", \"signature\", signature);\n    }\n    raw.push(hexlify(v));\n    raw.push(stripZeros(arrayify(sig.r)));\n    raw.push(stripZeros(arrayify(sig.s)));\n    return RLP.encode(raw);\n}\nexport function serialize(transaction, signature) {\n    // Legacy and EIP-155 Transactions\n    if (transaction.type == null) {\n        if (transaction.accessList != null) {\n            logger.throwArgumentError(\"untyped transactions do not support accessList; include type: 1\", \"transaction\", transaction);\n        }\n        return _serialize(transaction, signature);\n    }\n    // Typed Transactions (EIP-2718)\n    switch (transaction.type) {\n        case 1:\n            return _serializeEip2930(transaction, signature);\n        default:\n            break;\n    }\n    return logger.throwError(`unsupported transaction type: ${transaction.type}`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"serializeTransaction\",\n        transactionType: transaction.type\n    });\n}\nfunction _parseEip2930(payload) {\n    const transaction = RLP.decode(payload.slice(1));\n    if (transaction.length !== 8 && transaction.length !== 11) {\n        logger.throwArgumentError(\"invalid component count for transaction type: 1\", \"payload\", hexlify(payload));\n    }\n    const tx = {\n        type: 1,\n        chainId: handleNumber(transaction[0]).toNumber(),\n        nonce: handleNumber(transaction[1]).toNumber(),\n        gasPrice: handleNumber(transaction[2]),\n        gasLimit: handleNumber(transaction[3]),\n        to: handleAddress(transaction[4]),\n        value: handleNumber(transaction[5]),\n        data: transaction[6],\n        accessList: accessListify(transaction[7]),\n    };\n    // Unsigned EIP-2930 Transaction\n    if (transaction.length === 8) {\n        return tx;\n    }\n    try {\n        const recid = handleNumber(transaction[8]).toNumber();\n        if (recid !== 0 && recid !== 1) {\n            throw new Error(\"bad recid\");\n        }\n        tx.v = recid;\n    }\n    catch (error) {\n        logger.throwArgumentError(\"invalid v for transaction type: 1\", \"v\", transaction[8]);\n    }\n    tx.r = hexZeroPad(transaction[9], 32);\n    tx.s = hexZeroPad(transaction[10], 32);\n    try {\n        const digest = keccak256(_serializeEip2930(tx));\n        tx.from = recoverAddress(digest, { r: tx.r, s: tx.s, recoveryParam: tx.v });\n    }\n    catch (error) {\n        console.log(error);\n    }\n    tx.hash = keccak256(payload);\n    return tx;\n}\n// Legacy Transactions and EIP-155\nfunction _parse(rawTransaction) {\n    const transaction = RLP.decode(rawTransaction);\n    if (transaction.length !== 9 && transaction.length !== 6) {\n        logger.throwArgumentError(\"invalid raw transaction\", \"rawTransaction\", rawTransaction);\n    }\n    const tx = {\n        nonce: handleNumber(transaction[0]).toNumber(),\n        gasPrice: handleNumber(transaction[1]),\n        gasLimit: handleNumber(transaction[2]),\n        to: handleAddress(transaction[3]),\n        value: handleNumber(transaction[4]),\n        data: transaction[5],\n        chainId: 0\n    };\n    // Legacy unsigned transaction\n    if (transaction.length === 6) {\n        return tx;\n    }\n    try {\n        tx.v = BigNumber.from(transaction[6]).toNumber();\n    }\n    catch (error) {\n        console.log(error);\n        return tx;\n    }\n    tx.r = hexZeroPad(transaction[7], 32);\n    tx.s = hexZeroPad(transaction[8], 32);\n    if (BigNumber.from(tx.r).isZero() && BigNumber.from(tx.s).isZero()) {\n        // EIP-155 unsigned transaction\n        tx.chainId = tx.v;\n        tx.v = 0;\n    }\n    else {\n        // Signed Tranasaction\n        tx.chainId = Math.floor((tx.v - 35) / 2);\n        if (tx.chainId < 0) {\n            tx.chainId = 0;\n        }\n        let recoveryParam = tx.v - 27;\n        const raw = transaction.slice(0, 6);\n        if (tx.chainId !== 0) {\n            raw.push(hexlify(tx.chainId));\n            raw.push(\"0x\");\n            raw.push(\"0x\");\n            recoveryParam -= tx.chainId * 2 + 8;\n        }\n        const digest = keccak256(RLP.encode(raw));\n        try {\n            tx.from = recoverAddress(digest, { r: hexlify(tx.r), s: hexlify(tx.s), recoveryParam: recoveryParam });\n        }\n        catch (error) {\n            console.log(error);\n        }\n        tx.hash = keccak256(rawTransaction);\n    }\n    tx.type = null;\n    return tx;\n}\nexport function parse(rawTransaction) {\n    const payload = arrayify(rawTransaction);\n    // Legacy and EIP-155 Transactions\n    if (payload[0] > 0x7f) {\n        return _parse(payload);\n    }\n    // Typed Transaction (EIP-2718)\n    switch (payload[0]) {\n        case 1:\n            return _parseEip2930(payload);\n        default:\n            break;\n    }\n    return logger.throwError(`unsupported transaction type: ${payload[0]}`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"parseTransaction\",\n        transactionType: payload[0]\n    });\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}